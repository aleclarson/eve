// Generated by CoffeeScript 1.11.1
var Listener, Type, assertType, emptyFunction, type;

emptyFunction = require("emptyFunction");

assertType = require("assertType");

Type = require("Type");

type = Type("Listener");

type.defineArgs(function() {
  return {
    types: [Function, Function.Maybe]
  };
});

type.defineValues(function(listener, onDetach) {
  return {
    _notify: listener,
    _listeners: null,
    _onDetach: onDetach || emptyFunction
  };
});

type.defineGetters({
  isListening: function() {
    return this._notify !== null;
  },
  notify: function() {
    return this._notify || emptyFunction;
  }
});

type.defineMethods({
  detach: function() {
    this._notify = null;
    this.detach = emptyFunction;
    this.onDetach = emptyFunction;
    if (this._listeners) {
      this._listeners.detach(this);
      this._listeners = null;
    }
    this._onDetach(this);
    this._onDetach = null;
  },
  onDetach: function(callback) {
    var previous;
    assertType(callback, Function);
    if (this._onDetach === emptyFunction) {
      this._onDetach = callback;
      return;
    }
    previous = this._onDetach;
    this._onDetach = function(listener) {
      previous(listener);
      return callback(listener);
    };
  }
});

module.exports = Listener = type.build();
